# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.box = "centos/8"
  
  config.ssh.insert_key = false
  
  config.vm.synced_folder ".", "/vagrant"
  
  $script = <<-'SCRIPT'
   sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*
   sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.epel.cloud|g' /etc/yum.repos.d/CentOS-Linux-*
   sudo sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config
   sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
   sudo yum update -y
   sudo systemctl restart sshd
  SCRIPT
  
   $ansibleInstall = <<-'SCRIPT'
   sudo yum install -y python3-pip
   alternatives --set python /usr/bin/python3
   sudo pip3 install setuptools_rust
   pip3 install ansible --user.
   pip3 install wheel --user
   pip3 install ansible-core --user
   pip3 install ansible --user.
   ansible --version
   echo "192.168.0.118 ansible1.example.com ansible1" | sudo tee -a /etc/hosts
   echo "192.168.0.119 ansible2.example.com ansible2" | sudo tee -a /etc/hosts
  SCRIPT
  
   $ansibleUser = <<-'SCRIPT'
   id -u ansible >/dev/null 2>&1 || sudo useradd -m ansible && echo "ansible" | sudo passwd ansible --stdin
   echo "ansible ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/ansible
   sudo test -d /home/ansible/.ssh || sudo mkdir /home/ansible/.ssh/ && sudo test -f /home/ansible/.ssh/authorized_keys || sudo touch /home/ansible/.ssh/authorized_keys
   sudo chown ansible:ansible -R /home/ansible/.ssh/
   sudo chmod 600 /home/ansible/.ssh/authorized_keys
   sudo chmod 700 /home/ansible/.ssh
  SCRIPT
  

  config.vm.provider :virtualbox do |v|
    v.memory = 1024
    v.linked_clone = true
  end
  
  # App server 1
  # config.vm.define "control" do |app|
  #   config.vm.provision "shell", inline: $script
	#   config.vm.provision "shell", inline: $ansibleUser
	#   config.vm.provision "shell", inline: $ansibleInstall
  #   app.vm.hostname = "control.example.com"
  #   app.vm.network :private_network, ip: "192.168.0.122"
  # end

  # App server 2
  config.vm.define "ansible1" do |app|
    config.vm.provision "shell", inline: $script
	  config.vm.provision "shell", inline: $ansibleUser
    app.vm.hostname = "ansible1.example.com"
    app.vm.network :private_network, ip: "192.168.0.118"
    config.vm.provision "file", source: "~/.ssh/me.pub", destination: "~/.ssh/me.pub"
    config.vm.provision "shell", inline: <<-SHELL
      cat /home/vagrant/.ssh/me.pub > /home/ansible/.ssh/authorized_keys
    SHELL
  end

  # App server 3
  config.vm.define "ansible2" do |app|
    config.vm.provision "shell", inline: $script
	  config.vm.provision "shell", inline: $ansibleUser
    app.vm.hostname = "ansible2.example.com"
    app.vm.network :private_network, ip: "192.168.0.119"
    config.vm.provision "file", source: "~/.ssh/me.pub", destination: "~/.ssh/me.pub"
    config.vm.provision "shell", inline: <<-SHELL
      cat /home/vagrant/.ssh/me.pub > /home/ansible/.ssh/authorized_keys
    SHELL
  end

end
